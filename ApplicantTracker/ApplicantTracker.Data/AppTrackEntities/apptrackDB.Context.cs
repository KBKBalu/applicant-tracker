//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ApplicantTracker.Data.AppTrackEntities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;

    public partial class apptrackEntities : DbContext
    {
        public apptrackEntities()
            : base("name=apptrackEntities")
        {
            this.Configuration.LazyLoadingEnabled = false;
            this.Configuration.ProxyCreationEnabled = false;

        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<candidate> candidates { get; set; }
        public virtual DbSet<candidatestatu> candidatestatus { get; set; }
        public virtual DbSet<company> companies { get; set; }
        public virtual DbSet<industry> industries { get; set; }
        public virtual DbSet<role> roles { get; set; }
        public virtual DbSet<user> users { get; set; }
        public virtual DbSet<userrole> userroles { get; set; }
        public virtual DbSet<profileinfo> profileinfoes { get; set; }
        public virtual DbSet<profilestatu> profilestatus { get; set; }
    
        public virtual ObjectResult<SearchApplicant_Result> SearchApplicant(string searchText, string canStatus, string company, string experience, string createdBy, string salary, string location, string industry, string days, Nullable<int> startRecord, Nullable<int> pageLimit, ObjectParameter totalRecord)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var canStatusParameter = canStatus != null ?
                new ObjectParameter("CanStatus", canStatus) :
                new ObjectParameter("CanStatus", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var experienceParameter = experience != null ?
                new ObjectParameter("Experience", experience) :
                new ObjectParameter("Experience", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var salaryParameter = salary != null ?
                new ObjectParameter("Salary", salary) :
                new ObjectParameter("Salary", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var industryParameter = industry != null ?
                new ObjectParameter("Industry", industry) :
                new ObjectParameter("Industry", typeof(string));
    
            var daysParameter = days != null ?
                new ObjectParameter("Days", days) :
                new ObjectParameter("Days", typeof(string));
    
            var startRecordParameter = startRecord.HasValue ?
                new ObjectParameter("StartRecord", startRecord) :
                new ObjectParameter("StartRecord", typeof(int));
    
            var pageLimitParameter = pageLimit.HasValue ?
                new ObjectParameter("PageLimit", pageLimit) :
                new ObjectParameter("PageLimit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchApplicant_Result>("SearchApplicant", searchTextParameter, canStatusParameter, companyParameter, experienceParameter, createdByParameter, salaryParameter, locationParameter, industryParameter, daysParameter, startRecordParameter, pageLimitParameter, totalRecord);
        }
    }
}
